'use strict'
        
const TestRepo = use('App/Repositories/TestRepository')
const BaseController = use('BaseController')
const notifier = use('node-notifier')

class TestController extends BaseController {

    constructor() {
        super(TestRepo)
    }

  
    async index({response, view}) {

        notifier.notify(
            {
                title: 'Hey there',
                subtitle: "this is subtitle",
                message: "Hey this is description",
                sound: true, // Case Sensitive string for location of sound file, or use one of macOS' native sounds (see below)
                icon: 'Terminal Icon', // Absolute Path to Triggering Icon
                contentImage: undefined, // Absolute Path to Attached Image (Content Image)
                open: undefined, // URL to open on Click
                wait: false, // Wait for User Action against Notification or times out. Same as timeout = 5 seconds

                // New in latest version. See `example/macInput.js` for usage
                timeout: 5, // Takes precedence over wait if both are defined.
                closeLabel: undefined, // String. Label for cancel button
                actions: undefined, // String | Array<String>. Action label or list of labels in case of dropdown
                dropdownLabel: undefined, // String. Label to be used if multiple actions
                reply: false // Boolean. If notification should take input. Value passed as third argument in callback and event emitter.
            },
            function (error, response, metadata) {
                console.log("clicked")
            }
        );
        let data = {}
        let rows = await TestRepo.index();
        data.rows = rows ? rows.toJSON() : []
        data.title = "Test"
        return view.render('admin.test.index', data)
    }

    async create({response, view}) {
        return view.render('admin.test.create', {
            title: "Create Test"
        })
    }

    async store({response, view, request, session}) {
        let input = request.only(TestRepo.model.fillable)
        let test = await TestRepo.store(input, request)
        await session.flash({success: 'test created successfully!'})
        return response.redirect('/admin/tests');

    }

    async show({response, view, request, session}) {
        let id = request.params.id;
        let row = await TestRepo.model.find(id);
        if (row == null) {
            await session.flash({error: 'test not found'})
            return response.redirect('back')
        }
        return view.render('admin.test.show', {row: row.toJSON(), title: "Test"})
    }

    async edit({response, view, request, session}) {
        let id = request.params.id;
        let row = await TestRepo.model.find(id);
        if (row == null) {
            await session.flash({error: 'test not found'})
            return response.redirect('back')
        }
       
        return view.render('admin.test.edit', {
            row: row.toJSON(),
            title: "Edit Test"
        })
    }

    async update({response, view, request, session}) {
     const input = request.only(TestRepo.model.fillable)
        let res = await TestRepo.update(request.params.id, input)
        if (!res){
            await session.flash({error: 'Record not found'})
            return response.redirect('back')
        }else{
            await session.flash({success: 'Record updated successfully!'})
            return response.redirect('/admin/tests');
        }
    }

    async destroy({response, request, session}) {
        let id = request.params.id;
        let row = await TestRepo.model.find(id);
        if (row == null) {
            await session.flash({error: 'test not found'})
            return response.redirect('back')
        }
        await row.delete();
        await session.flash({success: 'test Deleted Successfully!'})
        return response.redirect('/admin/tests')
    }

}

module.exports = TestController
