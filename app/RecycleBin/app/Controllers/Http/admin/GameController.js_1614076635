'use strict'
        
const GameRepo = use('App/Repositories/GameRepository')
const BaseController = use('BaseController')

class GameController extends BaseController {

    constructor() {
        super(GameRepo)
    }

  
    async index({response, view}) {
        let data = {}
        let rows = await GameRepo.index();
        data.rows = rows ? rows.toJSON() : []
        data.title = "Game"
        return view.render('admin.game.index', data)
    }

    async create({response, view}) {
        return view.render('admin.game.create', {
            title: "Create Game"
        })
    }

    async store({response, view, request, session}) {
        let input = request.only(GameRepo.model.fillable)
        let game = await GameRepo.store(input, request)
        await session.flash({success: 'game created successfully!'})
        return response.redirect('/admin/games');

    }

    async show({response, view, request, session}) {
        let id = request.params.id;
        let row = await GameRepo.model.find(id);
        if (row == null) {
            await session.flash({error: 'game not found'})
            return response.redirect('back')
        }
        return view.render('admin.game.show', {row: row.toJSON(), title: "Game"})
    }

    async edit({response, view, request, session}) {
        let id = request.params.id;
        let row = await GameRepo.model.find(id);
        if (row == null) {
            await session.flash({error: 'game not found'})
            return response.redirect('back')
        }
       
        return view.render('admin.game.edit', {
            row: row.toJSON(),
            title: "Edit Game"
        })
    }

    async update({response, view, request, session}) {
     const input = request.only(GameRepo.model.fillable)
        let res = await GameRepo.update(request.params.id, input)
        if (!res){
            await session.flash({error: 'Record not found'})
            return response.redirect('back')
        }else{
            await session.flash({success: 'Record updated successfully!'})
            return response.redirect('/admin/games');
        }
    }

    async destroy({response, request, session}) {
        let id = request.params.id;
        let row = await GameRepo.model.find(id);
        if (row == null) {
            await session.flash({error: 'game not found'})
            return response.redirect('back')
        }
        await row.delete();
        await session.flash({success: 'game Deleted Successfully!'})
        return response.redirect('/admin/games')
    }

}

module.exports = GameController
